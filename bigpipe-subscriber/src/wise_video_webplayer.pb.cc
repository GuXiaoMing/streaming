// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wise_video_webplayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace baidu {
namespace video {

namespace {

const ::google::protobuf::Descriptor* Common_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Common_reflection_ = NULL;
const ::google::protobuf::Descriptor* WiseVideoWebplayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WiseVideoWebplayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LanguageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_wise_5fvideo_5fwebplayer_2eproto() {
  protobuf_AddDesc_wise_5fvideo_5fwebplayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wise_video_webplayer.proto");
  GOOGLE_CHECK(file != NULL);
  Common_descriptor_ = file->message_type(0);
  static const int Common_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, product_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, code_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, timestamp_),
  };
  Common_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Common_descriptor_,
      Common::default_instance_,
      Common_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Common, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Common));
  WiseVideoWebplayer_descriptor_ = file->message_type(1);
  static const int WiseVideoWebplayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, log_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, mac_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, all_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, type_),
  };
  WiseVideoWebplayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WiseVideoWebplayer_descriptor_,
      WiseVideoWebplayer::default_instance_,
      WiseVideoWebplayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WiseVideoWebplayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WiseVideoWebplayer));
  MetaData_descriptor_ = file->message_type(2);
  static const int MetaData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, log_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, log_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, product_name_),
  };
  MetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaData_descriptor_,
      MetaData::default_instance_,
      MetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaData));
  LanguageType_descriptor_ = file->enum_type(0);
  CodeType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wise_5fvideo_5fwebplayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Common_descriptor_, &Common::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WiseVideoWebplayer_descriptor_, &WiseVideoWebplayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaData_descriptor_, &MetaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wise_5fvideo_5fwebplayer_2eproto() {
  delete Common::default_instance_;
  delete Common_reflection_;
  delete WiseVideoWebplayer::default_instance_;
  delete WiseVideoWebplayer_reflection_;
  delete MetaData::default_instance_;
  delete MetaData_reflection_;
}

void protobuf_AddDesc_wise_5fvideo_5fwebplayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032wise_video_webplayer.proto\022\013baidu.vide"
    "o\"\306\001\n\006Common\022\024\n\014product_name\030\001 \001(\t\022\023\n\013mo"
    "dule_name\030\002 \001(\t\022\r\n\005logid\030\003 \002(\t\0222\n\010langua"
    "ge\030\004 \001(\0162\031.baidu.video.LanguageType:\005ZN_"
    "CH\022;\n\tcode_type\030\005 \001(\0162\025.baidu.video.Code"
    "Type:\021CODE_TYPE_UNKNOWN\022\021\n\ttimestamp\030\n \002"
    "(\003\"\272\001\n\022WiseVideoWebplayer\022\'\n\010metadata\030\031 "
    "\001(\0132\025.baidu.video.MetaData\022\017\n\007log_tag\030\032 "
    "\001(\t\022#\n\006common\030) \002(\0132\023.baidu.video.Common"
    "\022\024\n\013mac_address\030\201\001 \001(\t\022\r\n\004flag\030\202\001 \001(\t\022\021\n"
    "\010all_data\030\203\001 \001(\t\022\r\n\004type\030\204\001 \001(\t\"l\n\010MetaD"
    "ata\022\033\n\rlog_module_id\030\001 \001(\005:\0041526\022&\n\010log_"
    "name\030\002 \001(\t:\024wise_video_webplayer\022\033\n\014prod"
    "uct_name\030\003 \001(\t:\005video*#\n\014LanguageType\022\t\n"
    "\005ZN_CH\020\000\022\010\n\004THAI\020\001*A\n\010CodeType\022\025\n\021CODE_T"
    "YPE_UNKNOWN\020\000\022\010\n\004UTF8\020\001\022\007\n\003GBK\020\002\022\013\n\007GB18"
    "030\020\003", 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wise_video_webplayer.proto", &protobuf_RegisterTypes);
  Common::default_instance_ = new Common();
  WiseVideoWebplayer::default_instance_ = new WiseVideoWebplayer();
  MetaData::default_instance_ = new MetaData();
  Common::default_instance_->InitAsDefaultInstance();
  WiseVideoWebplayer::default_instance_->InitAsDefaultInstance();
  MetaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wise_5fvideo_5fwebplayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wise_5fvideo_5fwebplayer_2eproto {
  StaticDescriptorInitializer_wise_5fvideo_5fwebplayer_2eproto() {
    protobuf_AddDesc_wise_5fvideo_5fwebplayer_2eproto();
  }
} static_descriptor_initializer_wise_5fvideo_5fwebplayer_2eproto_;

const ::google::protobuf::EnumDescriptor* LanguageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanguageType_descriptor_;
}
bool LanguageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeType_descriptor_;
}
bool CodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Common::kProductNameFieldNumber;
const int Common::kModuleNameFieldNumber;
const int Common::kLogidFieldNumber;
const int Common::kLanguageFieldNumber;
const int Common::kCodeTypeFieldNumber;
const int Common::kTimestampFieldNumber;
#endif  // !_MSC_VER

Common::Common()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Common::InitAsDefaultInstance() {
}

Common::Common(const Common& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Common::SharedCtor() {
  _cached_size_ = 0;
  product_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = 0;
  code_type_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Common::~Common() {
  SharedDtor();
}

void Common::SharedDtor() {
  if (product_name_ != &::google::protobuf::internal::kEmptyString) {
    delete product_name_;
  }
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (logid_ != &::google::protobuf::internal::kEmptyString) {
    delete logid_;
  }
  if (this != default_instance_) {
  }
}

void Common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Common::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Common_descriptor_;
}

const Common& Common::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wise_5fvideo_5fwebplayer_2eproto();  return *default_instance_;
}

Common* Common::default_instance_ = NULL;

Common* Common::New() const {
  return new Common;
}

void Common::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_product_name()) {
      if (product_name_ != &::google::protobuf::internal::kEmptyString) {
        product_name_->clear();
      }
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_logid()) {
      if (logid_ != &::google::protobuf::internal::kEmptyString) {
        logid_->clear();
      }
    }
    language_ = 0;
    code_type_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_name().data(), this->product_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_module_name;
        break;
      }
      
      // optional string module_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logid;
        break;
      }
      
      // required string logid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logid().data(), this->logid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_language;
        break;
      }
      
      // optional .baidu.video.LanguageType language = 4 [default = ZN_CH];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (baidu::video::LanguageType_IsValid(value)) {
            set_language(static_cast< baidu::video::LanguageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_code_type;
        break;
      }
      
      // optional .baidu.video.CodeType code_type = 5 [default = CODE_TYPE_UNKNOWN];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (baidu::video::CodeType_IsValid(value)) {
            set_code_type(static_cast< baidu::video::CodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_timestamp;
        break;
      }
      
      // required int64 timestamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string product_name = 1;
  if (has_product_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->product_name(), output);
  }
  
  // optional string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->module_name(), output);
  }
  
  // required string logid = 3;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->logid(), output);
  }
  
  // optional .baidu.video.LanguageType language = 4 [default = ZN_CH];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->language(), output);
  }
  
  // optional .baidu.video.CodeType code_type = 5 [default = CODE_TYPE_UNKNOWN];
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->code_type(), output);
  }
  
  // required int64 timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Common::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string product_name = 1;
  if (has_product_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_name(), target);
  }
  
  // optional string module_name = 2;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }
  
  // required string logid = 3;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logid().data(), this->logid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logid(), target);
  }
  
  // optional .baidu.video.LanguageType language = 4 [default = ZN_CH];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->language(), target);
  }
  
  // optional .baidu.video.CodeType code_type = 5 [default = CODE_TYPE_UNKNOWN];
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->code_type(), target);
  }
  
  // required int64 timestamp = 10;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Common::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string product_name = 1;
    if (has_product_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_name());
    }
    
    // optional string module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }
    
    // required string logid = 3;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logid());
    }
    
    // optional .baidu.video.LanguageType language = 4 [default = ZN_CH];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }
    
    // optional .baidu.video.CodeType code_type = 5 [default = CODE_TYPE_UNKNOWN];
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code_type());
    }
    
    // required int64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Common::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Common* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Common*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Common::MergeFrom(const Common& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_name()) {
      set_product_name(from.product_name());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Common::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Common::CopyFrom(const Common& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Common::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000024) != 0x00000024) return false;
  
  return true;
}

void Common::Swap(Common* other) {
  if (other != this) {
    std::swap(product_name_, other->product_name_);
    std::swap(module_name_, other->module_name_);
    std::swap(logid_, other->logid_);
    std::swap(language_, other->language_);
    std::swap(code_type_, other->code_type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Common::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Common_descriptor_;
  metadata.reflection = Common_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WiseVideoWebplayer::kMetadataFieldNumber;
const int WiseVideoWebplayer::kLogTagFieldNumber;
const int WiseVideoWebplayer::kCommonFieldNumber;
const int WiseVideoWebplayer::kMacAddressFieldNumber;
const int WiseVideoWebplayer::kFlagFieldNumber;
const int WiseVideoWebplayer::kAllDataFieldNumber;
const int WiseVideoWebplayer::kTypeFieldNumber;
#endif  // !_MSC_VER

WiseVideoWebplayer::WiseVideoWebplayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WiseVideoWebplayer::InitAsDefaultInstance() {
  metadata_ = const_cast< ::baidu::video::MetaData*>(&::baidu::video::MetaData::default_instance());
  common_ = const_cast< ::baidu::video::Common*>(&::baidu::video::Common::default_instance());
}

WiseVideoWebplayer::WiseVideoWebplayer(const WiseVideoWebplayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WiseVideoWebplayer::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  log_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  common_ = NULL;
  mac_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  all_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WiseVideoWebplayer::~WiseVideoWebplayer() {
  SharedDtor();
}

void WiseVideoWebplayer::SharedDtor() {
  if (log_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete log_tag_;
  }
  if (mac_address_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_address_;
  }
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (all_data_ != &::google::protobuf::internal::kEmptyString) {
    delete all_data_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete metadata_;
    delete common_;
  }
}

void WiseVideoWebplayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WiseVideoWebplayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WiseVideoWebplayer_descriptor_;
}

const WiseVideoWebplayer& WiseVideoWebplayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wise_5fvideo_5fwebplayer_2eproto();  return *default_instance_;
}

WiseVideoWebplayer* WiseVideoWebplayer::default_instance_ = NULL;

WiseVideoWebplayer* WiseVideoWebplayer::New() const {
  return new WiseVideoWebplayer;
}

void WiseVideoWebplayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::baidu::video::MetaData::Clear();
    }
    if (has_log_tag()) {
      if (log_tag_ != &::google::protobuf::internal::kEmptyString) {
        log_tag_->clear();
      }
    }
    if (has_common()) {
      if (common_ != NULL) common_->::baidu::video::Common::Clear();
    }
    if (has_mac_address()) {
      if (mac_address_ != &::google::protobuf::internal::kEmptyString) {
        mac_address_->clear();
      }
    }
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
    if (has_all_data()) {
      if (all_data_ != &::google::protobuf::internal::kEmptyString) {
        all_data_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WiseVideoWebplayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.video.MetaData metadata = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_log_tag;
        break;
      }
      
      // optional string log_tag = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_tag().data(), this->log_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_common;
        break;
      }
      
      // required .baidu.video.Common common = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1034)) goto parse_mac_address;
        break;
      }
      
      // optional string mac_address = 129;
      case 129: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac_address().data(), this->mac_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1042)) goto parse_flag;
        break;
      }
      
      // optional string flag = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1050)) goto parse_all_data;
        break;
      }
      
      // optional string all_data = 131;
      case 131: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_all_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->all_data().data(), this->all_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1058)) goto parse_type;
        break;
      }
      
      // optional string type = 132;
      case 132: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WiseVideoWebplayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .baidu.video.MetaData metadata = 25;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->metadata(), output);
  }
  
  // optional string log_tag = 26;
  if (has_log_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_tag().data(), this->log_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->log_tag(), output);
  }
  
  // required .baidu.video.Common common = 41;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->common(), output);
  }
  
  // optional string mac_address = 129;
  if (has_mac_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      129, this->mac_address(), output);
  }
  
  // optional string flag = 130;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      130, this->flag(), output);
  }
  
  // optional string all_data = 131;
  if (has_all_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->all_data().data(), this->all_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      131, this->all_data(), output);
  }
  
  // optional string type = 132;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      132, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WiseVideoWebplayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .baidu.video.MetaData metadata = 25;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->metadata(), target);
  }
  
  // optional string log_tag = 26;
  if (has_log_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_tag().data(), this->log_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->log_tag(), target);
  }
  
  // required .baidu.video.Common common = 41;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->common(), target);
  }
  
  // optional string mac_address = 129;
  if (has_mac_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        129, this->mac_address(), target);
  }
  
  // optional string flag = 130;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        130, this->flag(), target);
  }
  
  // optional string all_data = 131;
  if (has_all_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->all_data().data(), this->all_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        131, this->all_data(), target);
  }
  
  // optional string type = 132;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        132, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WiseVideoWebplayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.video.MetaData metadata = 25;
    if (has_metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
    // optional string log_tag = 26;
    if (has_log_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_tag());
    }
    
    // required .baidu.video.Common common = 41;
    if (has_common()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
    // optional string mac_address = 129;
    if (has_mac_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_address());
    }
    
    // optional string flag = 130;
    if (has_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }
    
    // optional string all_data = 131;
    if (has_all_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->all_data());
    }
    
    // optional string type = 132;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WiseVideoWebplayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WiseVideoWebplayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WiseVideoWebplayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WiseVideoWebplayer::MergeFrom(const WiseVideoWebplayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::baidu::video::MetaData::MergeFrom(from.metadata());
    }
    if (from.has_log_tag()) {
      set_log_tag(from.log_tag());
    }
    if (from.has_common()) {
      mutable_common()->::baidu::video::Common::MergeFrom(from.common());
    }
    if (from.has_mac_address()) {
      set_mac_address(from.mac_address());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_all_data()) {
      set_all_data(from.all_data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WiseVideoWebplayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WiseVideoWebplayer::CopyFrom(const WiseVideoWebplayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WiseVideoWebplayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void WiseVideoWebplayer::Swap(WiseVideoWebplayer* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    std::swap(log_tag_, other->log_tag_);
    std::swap(common_, other->common_);
    std::swap(mac_address_, other->mac_address_);
    std::swap(flag_, other->flag_);
    std::swap(all_data_, other->all_data_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WiseVideoWebplayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WiseVideoWebplayer_descriptor_;
  metadata.reflection = WiseVideoWebplayer_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MetaData::_default_log_name_("wise_video_webplayer");
const ::std::string MetaData::_default_product_name_("video");
#ifndef _MSC_VER
const int MetaData::kLogModuleIdFieldNumber;
const int MetaData::kLogNameFieldNumber;
const int MetaData::kProductNameFieldNumber;
#endif  // !_MSC_VER

MetaData::MetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaData::InitAsDefaultInstance() {
}

MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaData::SharedCtor() {
  _cached_size_ = 0;
  log_module_id_ = 1526;
  log_name_ = const_cast< ::std::string*>(&_default_log_name_);
  product_name_ = const_cast< ::std::string*>(&_default_product_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaData::~MetaData() {
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (log_name_ != &_default_log_name_) {
    delete log_name_;
  }
  if (product_name_ != &_default_product_name_) {
    delete product_name_;
  }
  if (this != default_instance_) {
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaData_descriptor_;
}

const MetaData& MetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wise_5fvideo_5fwebplayer_2eproto();  return *default_instance_;
}

MetaData* MetaData::default_instance_ = NULL;

MetaData* MetaData::New() const {
  return new MetaData;
}

void MetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_module_id_ = 1526;
    if (has_log_name()) {
      if (log_name_ != &_default_log_name_) {
        log_name_->assign(_default_log_name_);
      }
    }
    if (has_product_name()) {
      if (product_name_ != &_default_product_name_) {
        product_name_->assign(_default_product_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 log_module_id = 1 [default = 1526];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_module_id_)));
          set_has_log_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log_name;
        break;
      }
      
      // optional string log_name = 2 [default = "wise_video_webplayer"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_name().data(), this->log_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_product_name;
        break;
      }
      
      // optional string product_name = 3 [default = "video"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_name().data(), this->product_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 log_module_id = 1 [default = 1526];
  if (has_log_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log_module_id(), output);
  }
  
  // optional string log_name = 2 [default = "wise_video_webplayer"];
  if (has_log_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_name().data(), this->log_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->log_name(), output);
  }
  
  // optional string product_name = 3 [default = "video"];
  if (has_product_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->product_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 log_module_id = 1 [default = 1526];
  if (has_log_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log_module_id(), target);
  }
  
  // optional string log_name = 2 [default = "wise_video_webplayer"];
  if (has_log_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_name().data(), this->log_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log_name(), target);
  }
  
  // optional string product_name = 3 [default = "video"];
  if (has_product_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_name().data(), this->product_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 log_module_id = 1 [default = 1526];
    if (has_log_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_module_id());
    }
    
    // optional string log_name = 2 [default = "wise_video_webplayer"];
    if (has_log_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_name());
    }
    
    // optional string product_name = 3 [default = "video"];
    if (has_product_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_module_id()) {
      set_log_module_id(from.log_module_id());
    }
    if (from.has_log_name()) {
      set_log_name(from.log_name());
    }
    if (from.has_product_name()) {
      set_product_name(from.product_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  
  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other != this) {
    std::swap(log_module_id_, other->log_module_id_);
    std::swap(log_name_, other->log_name_);
    std::swap(product_name_, other->product_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaData_descriptor_;
  metadata.reflection = MetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace video
}  // namespace baidu

// @@protoc_insertion_point(global_scope)
